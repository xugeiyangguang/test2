package 面试常见;

/*
* A数组和B数组，A数组大小为m，B数组大小为n。
1、查找B数组的每个成员是否在A数组中，时间复杂度为O(mn)
2、由于A和B数组都是有序数组，使用二分法查找B数组的每个成员是否在A数组中，时间复杂度为O(n*lgm)。
         如果n比m大，则查找A数组的成员是否在B数组中，时间复杂度为O(m*lgn)。
3、使用hash表，将A数组的值使用hash表保存，B中的值判断是否存在A中，由于hash表的查找时间复杂度为O(1)，
   所以该算法的时间复杂度为O（n）。但是此方法只适合m比较小的情况，
   如果A数组比较大，hash表容易产生collision的情况，hash表的查找平均速度将不再是O(1)。
4、使用两个指针分别指向数组A和数组B，指向数据小的指针往前继续移动，保存两个指针指向相同数据的值，
*  直到两个指针都指向数组末尾，该算法的时间复杂度为O(m+n)。

交集就是保存两个指针指向相同的值，并集就是保存两个指针指向不同的值，并且保存一份指向相同的值
 */
public class 已排序数组的交集和并集 {
    public static void main(String[] args) {

    }
}
